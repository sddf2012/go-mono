// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: user.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RpcUserService_RpcGetUser_FullMethodName  = "/userService.RpcUserService/RpcGetUser"
	RpcUserService_RpcGetUser2_FullMethodName = "/userService.RpcUserService/RpcGetUser2"
)

// RpcUserServiceClient is the client API for RpcUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcUserServiceClient interface {
	RpcGetUser(ctx context.Context, in *RpcGetUserReq, opts ...grpc.CallOption) (*RpcGetUserRes, error)
	RpcGetUser2(ctx context.Context, in *RpcGetUserReq2, opts ...grpc.CallOption) (*RpcGetUserRes2, error)
}

type rpcUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcUserServiceClient(cc grpc.ClientConnInterface) RpcUserServiceClient {
	return &rpcUserServiceClient{cc}
}

func (c *rpcUserServiceClient) RpcGetUser(ctx context.Context, in *RpcGetUserReq, opts ...grpc.CallOption) (*RpcGetUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcGetUserRes)
	err := c.cc.Invoke(ctx, RpcUserService_RpcGetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcUserServiceClient) RpcGetUser2(ctx context.Context, in *RpcGetUserReq2, opts ...grpc.CallOption) (*RpcGetUserRes2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcGetUserRes2)
	err := c.cc.Invoke(ctx, RpcUserService_RpcGetUser2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcUserServiceServer is the server API for RpcUserService service.
// All implementations must embed UnimplementedRpcUserServiceServer
// for forward compatibility.
type RpcUserServiceServer interface {
	RpcGetUser(context.Context, *RpcGetUserReq) (*RpcGetUserRes, error)
	RpcGetUser2(context.Context, *RpcGetUserReq2) (*RpcGetUserRes2, error)
	mustEmbedUnimplementedRpcUserServiceServer()
}

// UnimplementedRpcUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpcUserServiceServer struct{}

func (UnimplementedRpcUserServiceServer) RpcGetUser(context.Context, *RpcGetUserReq) (*RpcGetUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUser not implemented")
}
func (UnimplementedRpcUserServiceServer) RpcGetUser2(context.Context, *RpcGetUserReq2) (*RpcGetUserRes2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RpcGetUser2 not implemented")
}
func (UnimplementedRpcUserServiceServer) mustEmbedUnimplementedRpcUserServiceServer() {}
func (UnimplementedRpcUserServiceServer) testEmbeddedByValue()                        {}

// UnsafeRpcUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcUserServiceServer will
// result in compilation errors.
type UnsafeRpcUserServiceServer interface {
	mustEmbedUnimplementedRpcUserServiceServer()
}

func RegisterRpcUserServiceServer(s grpc.ServiceRegistrar, srv RpcUserServiceServer) {
	// If the following call pancis, it indicates UnimplementedRpcUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RpcUserService_ServiceDesc, srv)
}

func _RpcUserService_RpcGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcGetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServiceServer).RpcGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcUserService_RpcGetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServiceServer).RpcGetUser(ctx, req.(*RpcGetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcUserService_RpcGetUser2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcGetUserReq2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcUserServiceServer).RpcGetUser2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpcUserService_RpcGetUser2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcUserServiceServer).RpcGetUser2(ctx, req.(*RpcGetUserReq2))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcUserService_ServiceDesc is the grpc.ServiceDesc for RpcUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userService.RpcUserService",
	HandlerType: (*RpcUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcGetUser",
			Handler:    _RpcUserService_RpcGetUser_Handler,
		},
		{
			MethodName: "RpcGetUser2",
			Handler:    _RpcUserService_RpcGetUser2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
